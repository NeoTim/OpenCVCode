#include<opencv2/opencv.hpp>
#include<iostream>

using namespace std;
using namespace cv;

int main(int argc, char** argv)
{
	Mat src;
	src = imread("D:/test.jpg");
	if (src.empty())
	{
		cout << "src is wrong." << endl;
		return -1;
	}

	namedWindow("input", CV_WINDOW_AUTOSIZE);
	imshow("input", src);

	Mat dst;
// 	dst = Mat(src.size(), src.type());
// 	dst = Scalar(0, 0, 0);

// 	Mat dst = src.clone();
// 	src.copyTo(dst);
	namedWindow("output", CV_WINDOW_AUTOSIZE);

	cvtColor(src, dst, CV_BGR2GRAY);
	printf("input img channels:%d\n", src.channels());
	printf("output img channels:%d\n", dst.channels());

	int cols = dst.cols;
	int rows = dst.rows;

	printf("rows:%d cols:%d \n", rows, cols);
	const uchar* firstRow = dst.ptr<uchar>(0);
	printf("first pixel value:%d\n", *firstRow);

	Mat M(100, 100, CV_8UC3, Scalar(0, 255, 0));
// 	cout << "M=" << endl << M << endl;


	Mat m1;
	m1.create(src.size(), src.type());
	m1 = Scalar(0, 255, 0);

// 	Mat m2 = Mat::zeros(src.size(), src.type());

	Mat m2 = Mat::eye(2, 2, CV_8UC1);
	cout << "m2=" << endl << m2 << endl;

	imshow("output", m2);

	waitKey(0);
	return 0;
}
